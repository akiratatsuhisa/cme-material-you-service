// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: src/proto/material.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "material";

export interface Empty {
}

export interface SourceRequest {
  color: number;
}

export interface ImageRequest {
  buffer: Uint8Array;
}

export interface ThemeReply {
  source: number;
  style: string;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseSourceRequest(): SourceRequest {
  return { color: 0 };
}

export const SourceRequest: MessageFns<SourceRequest> = {
  encode(message: SourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.color !== 0) {
      writer.uint32(8).int64(message.color);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.color = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceRequest {
    return { color: isSet(object.color) ? globalThis.Number(object.color) : 0 };
  },

  toJSON(message: SourceRequest): unknown {
    const obj: any = {};
    if (message.color !== 0) {
      obj.color = Math.round(message.color);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SourceRequest>, I>>(base?: I): SourceRequest {
    return SourceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourceRequest>, I>>(object: I): SourceRequest {
    const message = createBaseSourceRequest();
    message.color = object.color ?? 0;
    return message;
  },
};

function createBaseImageRequest(): ImageRequest {
  return { buffer: new Uint8Array(0) };
}

export const ImageRequest: MessageFns<ImageRequest> = {
  encode(message: ImageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.buffer.length !== 0) {
      writer.uint32(10).bytes(message.buffer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.buffer = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageRequest {
    return { buffer: isSet(object.buffer) ? bytesFromBase64(object.buffer) : new Uint8Array(0) };
  },

  toJSON(message: ImageRequest): unknown {
    const obj: any = {};
    if (message.buffer.length !== 0) {
      obj.buffer = base64FromBytes(message.buffer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageRequest>, I>>(base?: I): ImageRequest {
    return ImageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageRequest>, I>>(object: I): ImageRequest {
    const message = createBaseImageRequest();
    message.buffer = object.buffer ?? new Uint8Array(0);
    return message;
  },
};

function createBaseThemeReply(): ThemeReply {
  return { source: 0, style: "" };
}

export const ThemeReply: MessageFns<ThemeReply> = {
  encode(message: ThemeReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== 0) {
      writer.uint32(8).int64(message.source);
    }
    if (message.style !== "") {
      writer.uint32(18).string(message.style);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ThemeReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThemeReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.source = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.style = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ThemeReply {
    return {
      source: isSet(object.source) ? globalThis.Number(object.source) : 0,
      style: isSet(object.style) ? globalThis.String(object.style) : "",
    };
  },

  toJSON(message: ThemeReply): unknown {
    const obj: any = {};
    if (message.source !== 0) {
      obj.source = Math.round(message.source);
    }
    if (message.style !== "") {
      obj.style = message.style;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ThemeReply>, I>>(base?: I): ThemeReply {
    return ThemeReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ThemeReply>, I>>(object: I): ThemeReply {
    const message = createBaseThemeReply();
    message.source = object.source ?? 0;
    message.style = object.style ?? "";
    return message;
  },
};

export type MaterialService = typeof MaterialService;
export const MaterialService = {
  test: {
    path: "/material.Material/Test",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: ThemeReply) => Buffer.from(ThemeReply.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ThemeReply.decode(value),
  },
  generateFromSourceColor: {
    path: "/material.Material/GenerateFromSourceColor",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SourceRequest) => Buffer.from(SourceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SourceRequest.decode(value),
    responseSerialize: (value: ThemeReply) => Buffer.from(ThemeReply.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ThemeReply.decode(value),
  },
  generateFromImageBuffer: {
    path: "/material.Material/GenerateFromImageBuffer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ImageRequest) => Buffer.from(ImageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ImageRequest.decode(value),
    responseSerialize: (value: ThemeReply) => Buffer.from(ThemeReply.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ThemeReply.decode(value),
  },
} as const;

export interface MaterialServer extends UntypedServiceImplementation {
  test: handleUnaryCall<Empty, ThemeReply>;
  generateFromSourceColor: handleUnaryCall<SourceRequest, ThemeReply>;
  generateFromImageBuffer: handleUnaryCall<ImageRequest, ThemeReply>;
}

export interface MaterialClient extends Client {
  test(request: Empty, callback: (error: ServiceError | null, response: ThemeReply) => void): ClientUnaryCall;
  test(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ThemeReply) => void,
  ): ClientUnaryCall;
  test(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ThemeReply) => void,
  ): ClientUnaryCall;
  generateFromSourceColor(
    request: SourceRequest,
    callback: (error: ServiceError | null, response: ThemeReply) => void,
  ): ClientUnaryCall;
  generateFromSourceColor(
    request: SourceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ThemeReply) => void,
  ): ClientUnaryCall;
  generateFromSourceColor(
    request: SourceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ThemeReply) => void,
  ): ClientUnaryCall;
  generateFromImageBuffer(
    request: ImageRequest,
    callback: (error: ServiceError | null, response: ThemeReply) => void,
  ): ClientUnaryCall;
  generateFromImageBuffer(
    request: ImageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ThemeReply) => void,
  ): ClientUnaryCall;
  generateFromImageBuffer(
    request: ImageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ThemeReply) => void,
  ): ClientUnaryCall;
}

export const MaterialClient = makeGenericClientConstructor(MaterialService, "material.Material") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MaterialClient;
  service: typeof MaterialService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
